{"ast":null,"code":"/*!\n *  howler.js v2.1.3\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n(function () {\n  'use strict';\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n\n  var HowlerGlobal = function () {\n    this.init();\n  };\n\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function () {\n      var self = this || Howler; // Create a global ID counter.\n\n      self._counter = 1000; // Pool of unlocked HTML5 Audio objects.\n\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10; // Internal properties.\n\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null; // Public properties.\n\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null; // Set to false to disable the auto audio unlocker.\n\n      self.autoUnlock = true; // Setup the various state values for global tracking.\n\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function (vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol); // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol; // Don't update any of the nodes if we are muted.\n\n        if (self._muted) {\n          return self;\n        } // When using Web Audio, we just need to adjust the master gain.\n\n\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        } // Loop through and change volume for all HTML5 audio nodes.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and change the volumes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function (muted) {\n      var self = this || Howler; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted; // With Web Audio, we just need to mute the master gain.\n\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      } // Loop through and mute all HTML5 Audio nodes.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and mark the audio node as muted.\n\n\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function () {\n      var self = this || Howler;\n\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      } // Create a new AudioContext to make sure it is fully reset.\n\n\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function (ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function () {\n      var self = this || Howler; // Keeps track of the suspend/resume state of the AudioContext.\n\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended'; // Automatically begin the 30-second suspend process\n\n      self._autoSuspend(); // Check if audio is available.\n\n\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio(); // Check if the canplaythrough event is available.\n\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      } // Test to make sure audio isn't disabled in Internet Explorer.\n\n\n      try {\n        var test = new Audio();\n\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {} // Check for supported codecs.\n\n\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function () {\n      var self = this || Howler;\n      var audioTest = null; // Must wrap in a try/catch because IE11 in server mode throws an error.\n\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function () {\n      var self = this || Howler; // Only run this if Web Audio is supported and it hasn't already been unlocked.\n\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false; // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      } // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n\n\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050); // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n\n      var unlock = function (e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        for (var i = 0; i < self.html5PoolSize; i++) {\n          try {\n            var audioNode = new Audio(); // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n\n            audioNode._unlocked = true; // Add the audio node to the pool.\n\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } // Loop through any assigned audio nodes and unlock them.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and unlock the audio nodes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n\n                sound._node.load();\n              }\n            }\n          }\n        } // Fix Android can not play in suspend state.\n\n\n        self._autoResume(); // Create an empty buffer.\n\n\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination); // Play the empty buffer.\n\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        } // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n\n\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        } // Setup a timeout to check that we are unlocked on the next event loop.\n\n\n        source.onended = function () {\n          source.disconnect(0); // Update the unlocked state and prevent this check from happening again.\n\n          self._audioUnlocked = true; // Remove the touch start listener.\n\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true); // Let all sounds know that audio has been unlocked.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      }; // Setup a touch start listener to attempt an unlock in.\n\n\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function () {\n      var self = this || Howler; // Return the next object from the pool if one exists.\n\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      } //.Check if the audio is locked and throw a warning.\n\n\n      var testPlay = new Audio().play();\n\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function (audio) {\n      var self = this || Howler; // Don't add audio to the pool if we don't know if it has been unlocked.\n\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function () {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      } // Check if any sounds are playing.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      } // If no sound has played after 30 seconds, suspend the context.\n\n\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function () {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n\n            self._autoResume();\n          }\n        });\n      }, 30000);\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function () {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function () {\n          self.state = 'running'; // Emit to all Howls that the audio has resumed.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  }; // Setup the global audio controller.\n\n  var Howler = new HowlerGlobal();\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n\n  var Howl = function (o) {\n    var self = this; // Throw an error if no source is provided.\n\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function (o) {\n      var self = this; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!Howler.ctx) {\n        setupAudioContext();\n      } // Setup user-defined default properties.\n\n\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false; // Setup all other default properties.\n\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false; // Setup event listeners.\n\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = []; // Web Audio or HTML5 Audio?\n\n      self._webAudio = Howler.usingWebAudio && !self._html5; // Automatically try to enable audio.\n\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      } // Keep track of this Howl group in the global controller.\n\n\n      Howler._howls.push(self); // If they selected autoplay, add a play event to the load queue.\n\n\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function () {\n            self.play();\n          }\n        });\n      } // Load the source file unless otherwise specified.\n\n\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function () {\n      var self = this;\n      var url = null; // If no audio is available, quit immediately.\n\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n\n        return;\n      } // Make sure our source is in an array.\n\n\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      } // Loop through the sources and pick the first one that is compatible.\n\n\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n\n            continue;\n          } // Extract the file extension from the URL or base64 data URI.\n\n\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        } // Log a warning if no extension was found.\n\n\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        } // Check if this extension is available.\n\n\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading'; // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      } // Create a new sound object and add it to the pool.\n\n\n      new Sound(self); // Load and decode the audio data for playback.\n\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function (sprite, internal) {\n      var self = this;\n      var id = null; // Determine if a sprite, sound id or nothing was passed\n\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default'; // Check if there is a single paused sound that isn't ended. \n        // If there is, play that sound. If not, continue as usual.  \n\n        if (!self._playLock) {\n          var num = 0;\n\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      } // Get the selected node, or get one from the pool.\n\n\n      var sound = id ? self._soundById(id) : self._inactiveSound(); // If the sound doesn't exist, do nothing.\n\n      if (!sound) {\n        return null;\n      } // Select the sprite definition.\n\n\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      } // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n\n\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite; // Mark this sound as not ended in case another sound is played before this one loads.\n\n        sound._ended = false; // Add the sound to the queue to be played on load.\n\n        var soundId = sound._id;\n\n        self._queue.push({\n          event: 'play',\n          action: function () {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      } // Don't play the sound if an id was passed and it is already playing.\n\n\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      } // Make sure the AudioContext isn't suspended, and resume it if it is.\n\n\n      if (self._webAudio) {\n        Howler._autoResume();\n      } // Determine how long to play for and where to start playing.\n\n\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite; // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n\n      sound._ended = false; // Update the parameters of the sound.\n\n      var setParams = function () {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      }; // End the sound instantly if seek is at the end.\n\n\n      if (seek >= stop) {\n        self._ended(sound);\n\n        return;\n      } // Begin the actual playback.\n\n\n      var node = sound._node;\n\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function () {\n          self._playLock = false;\n          setParams();\n\n          self._refreshBuffer(sound); // Setup the playback params.\n\n\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime; // Play the sound using the supported method.\n\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          } // Start a new timer if none is present.\n\n\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self._playLock = true; // Wait for the audio context to resume before playing.\n\n          self.once('resume', playWebAudio); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function () {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate; // Some browsers will throw an error if this is called without user interaction.\n\n          try {\n            var play = node.play(); // Support older browsers that don't support promises, and thus don't have this issue.\n\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true; // Set param values immediately.\n\n              setParams(); // Releases the lock and executes queued actions.\n\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n\n                if (!internal) {\n                  self._emit('play', sound._id);\n\n                  self._loadQueue();\n                }\n              }).catch(function () {\n                self._playLock = false;\n\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.'); // Reset the ended and paused values.\n\n\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            } // Setting rate before playing won't work in IE, so we set it again here.\n\n\n            node.playbackRate = sound._rate; // If the node is still paused, then we can assume there was a playback issue.\n\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n              return;\n            } // Setup the end timer on sprites or listen for the ended event.\n\n\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound); // Clear this listener.\n\n\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        }; // If this is streaming audio, make sure the src is set and load again.\n\n\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        } // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n\n\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function () {\n            // Begin playback.\n            playHtml5(); // Clear this listener.\n\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n\n          node.addEventListener(Howler._canPlayEvent, listener, false); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function (id) {\n      var self = this; // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function () {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be paused.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              } // Clean up the buffer source.\n\n\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        } // Fire the pause event, unless `true` is passed as the 2nd argument.\n\n\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function (id, internal) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to stop when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function () {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be stopped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                } // Clean up the buffer source.\n\n\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n\n              sound._node.pause(); // If this is a live stream, stop download once the audio is stopped.\n\n\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function (muted, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to mute when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function () {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      } // If applying mute/unmute to all sounds, update the group's value.\n\n\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      } // If no id is passed, get all ID's to be muted.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted; // Cancel active fade and set the volume to the end value.\n\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function () {\n      var self = this;\n      var args = arguments;\n      var vol, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the volume or return the current volume.\n\n\n      var sound;\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function () {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group volume.\n\n\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol; // Stop currently running fades.\n\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function (from, to, len, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to fade when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function () {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      } // Make sure the to/from/len values are numbers.\n\n\n      from = parseFloat(from);\n      to = parseFloat(to);\n      len = parseFloat(len); // Set the volume to the start position.\n\n      self.volume(from, id); // Fade the volume of one or all sounds.\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]); // Create a linear fade or fall back to timeouts with HTML5 Audio.\n\n\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          } // If we are using Web Audio, let the native methods do the actual fade.\n\n\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n\n            sound._node.gain.setValueAtTime(from, currentTime);\n\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function (sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now(); // Store the value being faded to.\n\n      sound._fadeTo = to; // Update the volume value on each interval tick.\n\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick; // Make sure the volume is in the right bounds.\n\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol); // Round to within 2 decimal points.\n\n        vol = Math.round(vol * 100) / 100; // Change the volume.\n\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        } // Set the group's volume.\n\n\n        if (isGroup) {\n          self._volume = vol;\n        } // When the fade is complete, stop it and fire event.\n\n\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function (id) {\n      var self = this;\n\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function () {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound; // Determine the values for loop and id.\n\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      } // If no id is passed, get all ID's to be looped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function () {\n      var self = this;\n      var args = arguments;\n      var rate, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the playback rate or return the current value.\n\n\n      var sound;\n\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function () {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group rate.\n\n\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n\n            sound._rate = rate; // Change the playback rate.\n\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            } // Reset the timers.\n\n\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate); // Start a new end timer if sound is already playing.\n\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function () {\n      var self = this;\n      var args = arguments;\n      var seek, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // If there is no ID, bail out.\n\n\n      if (typeof id === 'undefined') {\n        return self;\n      } // If the sound hasn't loaded, add it to the load queue to seek when capable.\n\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function () {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      } // Get the sound.\n\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n\n          if (playing) {\n            self.pause(id, true);\n          } // Move the position of the track and cancel timer.\n\n\n          sound._seek = seek;\n          sound._ended = false;\n\n          self._clearTimer(id); // Update the seek position for HTML5 Audio.\n\n\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          } // Seek and emit when ready.\n\n\n          var seekAndEmit = function () {\n            self._emit('seek', id); // Restart the playback if the sound was playing.\n\n\n            if (playing) {\n              self.play(id, true);\n            }\n          }; // Wait for the play lock to be unset before emitting (HTML5 Audio).\n\n\n          if (playing && !self._webAudio) {\n            var emitSeek = function () {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function (id) {\n      var self = this; // Check the passed sound ID (if any).\n\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n\n        return sound ? !sound._paused : false;\n      } // Otherwise, loop through all sounds and check if any are playing.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function (id) {\n      var self = this;\n      var duration = self._duration; // If we pass an ID, get the sound and return the sprite length.\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function () {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function () {\n      var self = this; // Stop playing any active sounds.\n\n      var sounds = self._sounds;\n\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        } // Remove the source or disconnect.\n\n\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node); // Remove any event listeners.\n\n\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false); // Release the Audio object back to the pool.\n\n\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        } // Empty out all of the nodes.\n\n\n        delete sounds[i]._node; // Make sure all timers are cleared out.\n\n        self._clearTimer(sounds[i]._id);\n      } // Remove the references in the global Howler object.\n\n\n      var index = Howler._howls.indexOf(self);\n\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      } // Delete this sound from the cache (if no other Howl is using it).\n\n\n      var remCache = true;\n\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      } // Clear global errors.\n\n\n      Howler.noAudio = false; // Clear out `self`.\n\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function (event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function (event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0; // Allow passing just an event and ID.\n\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function (event, fn, id) {\n      var self = this; // Setup the event listener.\n\n      self.on(event, fn, id, 1);\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function (event, id, msg) {\n      var self = this;\n      var events = self['_on' + event]; // Loop through event store and fire all functions.\n\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0); // If this event was setup with `once`, remove it.\n\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      } // Pass the event type into load queue so that it can continue stepping.\n\n\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function (event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0]; // Remove this task if a matching event was passed.\n\n        if (task.event === event) {\n          self._queue.shift();\n\n          self._loadQueue();\n        } // Run the task if no event type is passed.\n\n\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function (sound) {\n      var self = this;\n      var sprite = sound._sprite; // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      } // Should this sound loop?\n\n\n      var loop = !!(sound._loop || self._sprite[sprite][2]); // Fire the ended event.\n\n      self._emit('end', sound._id); // Restart the playback for HTML5 Audio loop.\n\n\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      } // Restart this timer if on a Web Audio loop.\n\n\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      } // Mark the node as paused.\n\n\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n\n        self._clearTimer(sound._id); // Clean up the buffer source.\n\n\n        self._cleanBuffer(sound._node); // Attempt to auto-suspend AudioContext if no sounds are still playing.\n\n\n        Howler._autoSuspend();\n      } // When using a sprite, end the track.\n\n\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function (id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function (id) {\n      var self = this; // Loop through all sounds and find the one with this ID.\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function () {\n      var self = this;\n\n      self._drain(); // Find the first inactive node to recycle.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      } // If no inactive node was found, create a new one.\n\n\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function () {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0; // If there are less sounds than the max pool size, we are done.\n\n      if (self._sounds.length < limit) {\n        return;\n      } // Count the number of inactive sounds.\n\n\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      } // Remove excess inactive sounds, going in reverse order.\n\n\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          } // Remove sounds until we have the pool size.\n\n\n          self._sounds.splice(i, 1);\n\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function (id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function (sound) {\n      var self = this; // Setup the buffer source for playback.\n\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src]; // Connect to the correct node.\n\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      } // Setup looping and playback rate.\n\n\n      sound._node.bufferSource.loop = sound._loop;\n\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function (node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n\n      node.bufferSource = null;\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function (node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n\n  var Sound = function (howl) {\n    this._parent = howl;\n    this.init();\n  };\n\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function () {\n      var self = this;\n      var parent = self._parent; // Setup the default parameters.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a unique ID for this sound.\n\n      self._id = ++Howler._counter; // Add itself to the parent's pool.\n\n      parent._sounds.push(self); // Create the new node.\n\n\n      self.create();\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function () {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n\n        self._node.paused = true;\n\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio(); // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n\n        self._errorFn = self._errorListener.bind(self);\n\n        self._node.addEventListener('error', self._errorFn, false); // Listen for 'canplaythrough' event to let us know the sound is ready.\n\n\n        self._loadFn = self._loadListener.bind(self);\n\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false); // Setup the new audio node.\n\n\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume(); // Begin loading the source.\n\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function () {\n      var self = this;\n      var parent = self._parent; // Reset all of the parameters of this sound.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a new ID so that it isn't confused with the previous sound.\n\n      self._id = ++Howler._counter;\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function () {\n      var self = this; // Fire an error event and pass back the code.\n\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0); // Clear the event listener.\n\n\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function () {\n      var self = this;\n      var parent = self._parent; // Round up the duration to account for the lower precision in HTML5 Audio.\n\n      parent._duration = Math.ceil(self._node.duration * 10) / 10; // Setup a sprite if none is defined.\n\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n\n        parent._emit('load');\n\n        parent._loadQueue();\n      } // Clear the event listener.\n\n\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  var cache = {};\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n\n  var loadBuffer = function (self) {\n    var url = self._src; // Check if the buffer has already been cached and use it instead.\n\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration; // Load the sound into this Howl.\n\n      loadSound(self);\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n\n      safeXhrSend(xhr);\n    }\n  };\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n\n\n  var safeXhrSend = function (xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n\n\n  var decodeAudioData = function (arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function () {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    }; // Load the sound on success.\n\n\n    var success = function (buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    }; // Decode the buffer into an audio source.\n\n\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n\n\n  var loadSound = function (self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    } // Setup a sprite if none is defined.\n\n\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    } // Fire the loaded event.\n\n\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n\n      self._emit('load');\n\n      self._loadQueue();\n    }\n  };\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n\n\n  var setupAudioContext = function () {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    } // Check if we are using Web Audio and setup the AudioContext if we are.\n\n\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    } // If the audio context creation still failed, set using web audio to false.\n\n\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    } // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n\n\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    } // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n\n\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    } // Re-run the setup on Howler.\n\n\n    Howler._setup();\n  }; // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  } // Add support for CommonJS libraries such as browserify.\n\n\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  } // Define globally in case AMD is not available or unused.\n\n\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') {\n    // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.1.3\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n\n(function () {\n  'use strict'; // Setup default properties.\n\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n\n  HowlerGlobal.prototype.stereo = function (pan) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Loop through all Howls and update their stereo panning.\n\n\n    for (var i = self._howls.length - 1; i >= 0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n\n\n  HowlerGlobal.prototype.pos = function (x, y, z) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._pos[1] : y;\n    z = typeof z !== 'number' ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n\n\n  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    var or = self._orientation;\n    y = typeof y !== 'number' ? or[1] : y;\n    z = typeof z !== 'number' ? or[2] : z;\n    xUp = typeof xUp !== 'number' ? or[3] : xUp;\n    yUp = typeof yUp !== 'number' ? or[4] : yUp;\n    zUp = typeof zUp !== 'number' ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n\n\n  Howl.prototype.init = function (_super) {\n    return function (o) {\n      var self = this; // Setup user-defined default properties.\n\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      }; // Setup event listeners.\n\n      self._onstereo = o.onstereo ? [{\n        fn: o.onstereo\n      }] : [];\n      self._onpos = o.onpos ? [{\n        fn: o.onpos\n      }] : [];\n      self._onorientation = o.onorientation ? [{\n        fn: o.onorientation\n      }] : []; // Complete initilization with howler.js core's init function.\n\n      return _super.call(this, o);\n    };\n  }(Howl.prototype.init);\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n\n\n  Howl.prototype.stereo = function (pan, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function () {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    } // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n\n\n    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo'; // Setup the group's stereo panning if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    } // Change the streo panning of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower'; // Check if there is a panner setup and create a new one if not.\n\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n\n\n  Howl.prototype.pos = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change position when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function () {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? 0 : y;\n    z = typeof z !== 'number' ? -0.5 : z; // Setup the group's spatial position if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    } // Change the spatial position of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n\n\n  Howl.prototype.orientation = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function () {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._orientation[1] : y;\n    z = typeof z !== 'number' ? self._orientation[2] : z; // Setup the group's spatial orientation if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    } // Change the spatial orientation of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n\n\n  Howl.prototype.pannerAttr = function () {\n    var self = this;\n    var args = arguments;\n    var o, id, sound; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // Determine the values based on arguments.\n\n\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0]; // Set the grou's panner attribute values.\n\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    } // Update the values of the specified sounds.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        }; // Update the panner values or create a new panner if none exists.\n\n        var panner = sound._panner;\n\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          } // Create a new panner node.\n\n\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.init = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Setup user-defined default properties.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // Complete initilization with howler.js core Sound's init function.\n\n      _super.call(this); // If a stereo or position was specified, set it up.\n\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  }(Sound.prototype.init);\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.reset = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Reset all spatial plugin properties on this sound.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // If a stereo or position was specified, set it up.\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n\n        self._panner = undefined;\n\n        parent._refreshBuffer(self);\n      } // Complete resetting of the sound.\n\n\n      return _super.call(this);\n    };\n  }(Sound.prototype.reset);\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n\n\n  var setupPanner = function (sound, type) {\n    type = type || 'spatial'; // Create the new panner node.\n\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node); // Update the connections.\n\n\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();","map":{"version":3,"sources":["/home/landonrepp/Desktop/youtube-steamer/Client/IonicApp/node_modules/howler/dist/howler.js"],"names":["HowlerGlobal","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","test","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhrWithCredentials","xhrWithCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","stop","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","index","indexOf","apply","fade","from","to","len","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","min","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","seekAndEmit","emitSeek","realTime","rateSeek","sounds","_errorFn","_loadFn","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","checkIE","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","withCredentials","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","define","amd","exports","global","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_super","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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","sourcesContent":["/*!\n *  howler.js v2.1.3\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        for (var i=0; i<self.html5PoolSize; i++) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended. \n        // If there is, play that sound. If not, continue as usual.  \n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = parseFloat(from);\n      to = parseFloat(to);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol);\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.1.3\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"]},"metadata":{},"sourceType":"script"}