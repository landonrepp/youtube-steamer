{"ast":null,"code":"import _regeneratorRuntime from \"/home/landonrepp/Desktop/youtube-steamer/Client/IonicApp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/landonrepp/Desktop/youtube-steamer/Client/IonicApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _assertThisInitialized from \"/home/landonrepp/Desktop/youtube-steamer/Client/IonicApp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"/home/landonrepp/Desktop/youtube-steamer/Client/IonicApp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/landonrepp/Desktop/youtube-steamer/Client/IonicApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/landonrepp/Desktop/youtube-steamer/Client/IonicApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/landonrepp/Desktop/youtube-steamer/Client/IonicApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/landonrepp/Desktop/youtube-steamer/Client/IonicApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __rest } from 'tslib';\nimport React from 'react';\nimport { matchPath, withRouter, BrowserRouter, HashRouter } from 'react-router-dom';\nimport { NavContext, IonLifeCycleContext, DefaultIonLifeCycleContext, getConfig } from '@ionic/react';\nimport { Redirect, matchPath as matchPath$1, MemoryRouter } from 'react-router';\nvar count = 0;\n\nvar generateId = function generateId() {\n  return (count++).toString();\n};\n\nvar isDevMode = function isDevMode() {\n  return process && process.env && process.env.NODE_ENV === 'development';\n};\n\nvar RESTRICT_SIZE = 25;\n\nvar LocationHistory =\n/*#__PURE__*/\nfunction () {\n  function LocationHistory() {\n    _classCallCheck(this, LocationHistory);\n\n    this.locationHistory = [];\n  }\n\n  _createClass(LocationHistory, [{\n    key: \"add\",\n    value: function add(location) {\n      this.locationHistory.push(location);\n\n      if (this.locationHistory.length > RESTRICT_SIZE) {\n        this.locationHistory.splice(0, 10);\n      }\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      this.locationHistory.pop();\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(location) {\n      this.locationHistory.pop();\n      this.locationHistory.push(location);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.locationHistory = [];\n    }\n  }, {\n    key: \"findLastLocationByUrl\",\n    value: function findLastLocationByUrl(url) {\n      for (var i = this.locationHistory.length - 1; i >= 0; i--) {\n        var location = this.locationHistory[i];\n\n        if (location.pathname.toLocaleLowerCase() === url.toLocaleLowerCase()) {\n          return location;\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"previous\",\n    value: function previous() {\n      return this.locationHistory[this.locationHistory.length - 2];\n    }\n  }, {\n    key: \"current\",\n    value: function current() {\n      return this.locationHistory[this.locationHistory.length - 1];\n    }\n  }]);\n\n  return LocationHistory;\n}();\n/**\n * The holistic view of all the Routes configured for an application inside of an IonRouterOutlet.\n */\n\n\nvar ViewStacks =\n/*#__PURE__*/\nfunction () {\n  function ViewStacks() {\n    _classCallCheck(this, ViewStacks);\n\n    this.viewStacks = {};\n  }\n\n  _createClass(ViewStacks, [{\n    key: \"get\",\n    value: function get(key) {\n      return this.viewStacks[key];\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, viewStack) {\n      this.viewStacks[key] = viewStack;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return Object.keys(this.viewStacks);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      delete this.viewStacks[key];\n    }\n  }, {\n    key: \"findViewInfoByLocation\",\n    value: function findViewInfoByLocation(location, viewKey) {\n      var view;\n      var match;\n      var viewStack;\n      viewStack = this.viewStacks[viewKey];\n\n      if (viewStack) {\n        viewStack.views.some(matchView);\n\n        if (!view) {\n          viewStack.views.some(function (r) {\n            // try to find a route that doesn't have a path or from prop, that will be our not found route\n            if (!r.routeData.childProps.path && !r.routeData.childProps.from) {\n              match = {\n                path: location.pathname,\n                url: location.pathname,\n                isExact: true,\n                params: {}\n              };\n              view = r;\n              return true;\n            }\n\n            return false;\n          });\n        }\n      }\n\n      return {\n        view: view,\n        viewStack: viewStack,\n        match: match\n      };\n\n      function matchView(v) {\n        var matchProps = {\n          exact: v.routeData.childProps.exact,\n          path: v.routeData.childProps.path || v.routeData.childProps.from,\n          component: v.routeData.childProps.component\n        };\n        var myMatch = matchPath(location.pathname, matchProps);\n\n        if (myMatch) {\n          view = v;\n          match = myMatch;\n          return true;\n        }\n\n        return false;\n      }\n    }\n  }, {\n    key: \"findViewInfoById\",\n    value: function findViewInfoById() {\n      var _this = this;\n\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var view;\n      var viewStack;\n      var keys = this.getKeys();\n      keys.some(function (key) {\n        var vs = _this.viewStacks[key];\n        view = vs.views.find(function (x) {\n          return x.id === id;\n        });\n\n        if (view) {\n          viewStack = vs;\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return {\n        view: view,\n        viewStack: viewStack\n      };\n    }\n  }]);\n\n  return ViewStacks;\n}();\n\nvar RouteManagerContext =\n/*@__PURE__*/\nReact.createContext({\n  viewStacks: new ViewStacks(),\n  syncView: function syncView() {\n    navContextNotFoundError();\n  },\n  syncRoute: function syncRoute() {\n    navContextNotFoundError();\n  },\n  hideView: function hideView() {\n    navContextNotFoundError();\n  },\n  setupIonRouter: function setupIonRouter() {\n    return Promise.reject(navContextNotFoundError());\n  },\n  removeViewStack: function removeViewStack() {\n    navContextNotFoundError();\n  },\n  getRoute: function getRoute() {\n    navContextNotFoundError();\n  }\n});\n\nfunction navContextNotFoundError() {\n  console.error('IonReactRouter not found, did you add it to the app?');\n}\n/**\n * The View component helps manage the IonPage's lifecycle and registration\n */\n\n\nvar View =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(View, _React$Component);\n\n  function View() {\n    _classCallCheck(this, View);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(View).apply(this, arguments));\n  }\n\n  _createClass(View, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      /**\n       * If we can tell if view is a redirect, hide it so it will work again in future\n       */\n      var _this$props = this.props,\n          view = _this$props.view,\n          route = _this$props.route;\n\n      if (route.type === Redirect) {\n        this.props.onHideView(view.id);\n      } else if (route.props.render && !view.isIonRoute) {\n        // Test the render to see if it returns a redirect\n        if (route.props.render().type === Redirect) {\n          this.props.onHideView(view.id);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.ionPage) {\n        this.ionPage.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n        this.ionPage.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n        this.ionPage.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n        this.ionPage.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n      }\n    }\n  }, {\n    key: \"ionViewWillEnterHandler\",\n    value: function ionViewWillEnterHandler() {\n      this.context.ionViewWillEnter();\n    }\n  }, {\n    key: \"ionViewDidEnterHandler\",\n    value: function ionViewDidEnterHandler() {\n      this.context.ionViewDidEnter();\n    }\n  }, {\n    key: \"ionViewWillLeaveHandler\",\n    value: function ionViewWillLeaveHandler() {\n      this.context.ionViewWillLeave();\n    }\n  }, {\n    key: \"ionViewDidLeaveHandler\",\n    value: function ionViewDidLeaveHandler() {\n      this.context.ionViewDidLeave();\n    }\n  }, {\n    key: \"registerIonPage\",\n    value: function registerIonPage(page) {\n      this.ionPage = page;\n      this.ionPage.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n      this.ionPage.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n      this.ionPage.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n      this.ionPage.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n      this.ionPage.classList.add('ion-page-invisible');\n\n      if (isDevMode()) {\n        this.ionPage.setAttribute('data-view-id', this.props.view.id);\n      }\n\n      this.props.onViewSync(page, this.props.view.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(NavContext.Consumer, null, function (value) {\n        var newProvider = Object.assign(Object.assign({}, value), {\n          registerIonPage: _this2.registerIonPage.bind(_this2)\n        });\n        return React.createElement(NavContext.Provider, {\n          value: newProvider\n        }, _this2.props.children);\n      });\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return IonLifeCycleContext;\n    }\n  }]);\n\n  return View;\n}(React.Component);\n/**\n * Manages the View's DOM lifetime by keeping it around long enough to complete page transitions before removing it.\n */\n\n\nvar ViewTransitionManager =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(ViewTransitionManager, _React$Component2);\n\n  function ViewTransitionManager(props) {\n    var _this3;\n\n    _classCallCheck(this, ViewTransitionManager);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ViewTransitionManager).call(this, props));\n    _this3.ionLifeCycleContext = new DefaultIonLifeCycleContext();\n    _this3._isMounted = false;\n    _this3.state = {\n      show: true\n    };\n\n    _this3.ionLifeCycleContext.onComponentCanBeDestroyed(function () {\n      if (!_this3.props.mount) {\n        if (_this3._isMounted) {\n          _this3.setState({\n            show: false\n          }, function () {\n            _this3.context.hideView(_this3.props.id);\n          });\n        }\n      }\n    });\n\n    return _this3;\n  }\n\n  _createClass(ViewTransitionManager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var show = this.state.show;\n      return React.createElement(IonLifeCycleContext.Provider, {\n        value: this.ionLifeCycleContext\n      }, show && this.props.children);\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return RouteManagerContext;\n    }\n  }]);\n\n  return ViewTransitionManager;\n}(React.Component);\n\nvar StackManagerInner =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(StackManagerInner, _React$Component3);\n\n  function StackManagerInner(props) {\n    var _this4;\n\n    _classCallCheck(this, StackManagerInner);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(StackManagerInner).call(this, props));\n    _this4.routerOutletEl = React.createRef();\n    _this4.id = _this4.props.id || generateId();\n    _this4.handleViewSync = _this4.handleViewSync.bind(_assertThisInitialized(_this4));\n    _this4.handleHideView = _this4.handleHideView.bind(_assertThisInitialized(_this4));\n    _this4.state = {};\n    return _this4;\n  }\n\n  _createClass(StackManagerInner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.routeManager.setupIonRouter(this.id, this.props.children, this.routerOutletEl.current);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.routeManager.removeViewStack(this.id);\n    }\n  }, {\n    key: \"handleViewSync\",\n    value: function handleViewSync(page, viewId) {\n      this.props.routeManager.syncView(page, viewId);\n    }\n  }, {\n    key: \"handleHideView\",\n    value: function handleHideView(viewId) {\n      this.props.routeManager.hideView(viewId);\n    }\n  }, {\n    key: \"renderChild\",\n    value: function renderChild(item, route) {\n      var component = React.cloneElement(route, {\n        computedMatch: item.routeData.match\n      });\n      return component;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var routeManager = this.props.routeManager;\n      var viewStack = routeManager.viewStacks.get(this.id);\n      var views = (viewStack || {\n        views: []\n      }).views.filter(function (x) {\n        return x.show;\n      });\n      var ionRouterOutlet = React.Children.only(this.props.children);\n      var childElements = views.map(function (view) {\n        var route = routeManager.getRoute(view.routeId);\n        return React.createElement(ViewTransitionManager, {\n          id: view.id,\n          key: view.key,\n          mount: view.mount\n        }, React.createElement(View, {\n          onViewSync: _this5.handleViewSync,\n          onHideView: _this5.handleHideView,\n          view: view,\n          route: route\n        }, _this5.renderChild(view, route)));\n      });\n      var elementProps = {\n        ref: this.routerOutletEl\n      };\n\n      if (ionRouterOutlet.props.forwardedRef) {\n        ionRouterOutlet.props.forwardedRef.current = this.routerOutletEl;\n      }\n\n      if (isDevMode()) {\n        elementProps['data-stack-id'] = this.id;\n      }\n\n      var routerOutletChild = React.cloneElement(ionRouterOutlet, elementProps, childElements);\n      return routerOutletChild;\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      props.routeManager.syncRoute(props.children);\n      return state;\n    }\n  }]);\n\n  return StackManagerInner;\n}(React.Component);\n\nvar withContext = function withContext(Component) {\n  return function (props) {\n    return React.createElement(RouteManagerContext.Consumer, null, function (context) {\n      return React.createElement(Component, Object.assign({}, props, {\n        routeManager: context\n      }));\n    });\n  };\n};\n\nvar StackManager = withContext(StackManagerInner);\n\nvar NavManager =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(NavManager, _React$Component4);\n\n  function NavManager(props) {\n    var _this6;\n\n    _classCallCheck(this, NavManager);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(NavManager).call(this, props));\n    _this6.state = {\n      goBack: _this6.goBack.bind(_assertThisInitialized(_this6)),\n      hasIonicRouter: function hasIonicRouter() {\n        return true;\n      },\n      navigate: _this6.navigate.bind(_assertThisInitialized(_this6)),\n      getStackManager: _this6.getStackManager.bind(_assertThisInitialized(_this6)),\n      getPageManager: _this6.getPageManager.bind(_assertThisInitialized(_this6)),\n      currentPath: _this6.props.location.pathname,\n      registerIonPage: function registerIonPage() {\n        return;\n      } // overridden in View for each IonPage\n\n    };\n    _this6.listenUnregisterCallback = _this6.props.history.listen(function (location) {\n      _this6.setState({\n        currentPath: location.pathname\n      });\n    });\n\n    if (document) {\n      document.addEventListener('ionBackButton', function (e) {\n        e.detail.register(0, function () {\n          _this6.props.history.goBack();\n        });\n      });\n    }\n\n    return _this6;\n  }\n\n  _createClass(NavManager, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.listenUnregisterCallback) {\n        this.listenUnregisterCallback();\n      }\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack(defaultHref) {\n      this.props.onNavigateBack(defaultHref);\n    }\n  }, {\n    key: \"navigate\",\n    value: function navigate(path, direction) {\n      var ionRouteAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'push';\n      this.props.onNavigate(ionRouteAction, path, direction);\n    }\n  }, {\n    key: \"getPageManager\",\n    value: function getPageManager() {\n      return function (children) {\n        return children;\n      };\n    }\n  }, {\n    key: \"getStackManager\",\n    value: function getStackManager() {\n      return StackManager;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(NavContext.Provider, {\n        value: this.state\n      }, this.props.children);\n    }\n  }]);\n\n  return NavManager;\n}(React.Component);\n\nvar RouteManager =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(RouteManager, _React$Component5);\n\n  function RouteManager(props) {\n    var _this7;\n\n    _classCallCheck(this, RouteManager);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(RouteManager).call(this, props));\n    _this7.locationHistory = new LocationHistory();\n    _this7.routes = {};\n    _this7.ionPageElements = {};\n    _this7.routerOutlets = {};\n    _this7.firstRender = true;\n    _this7.listenUnregisterCallback = _this7.props.history.listen(_this7.historyChange.bind(_assertThisInitialized(_this7)));\n    _this7.handleNavigate = _this7.handleNavigate.bind(_assertThisInitialized(_this7));\n    _this7.navigateBack = _this7.navigateBack.bind(_assertThisInitialized(_this7));\n    _this7.state = {\n      viewStacks: new ViewStacks(),\n      hideView: _this7.hideView.bind(_assertThisInitialized(_this7)),\n      setupIonRouter: _this7.setupIonRouter.bind(_assertThisInitialized(_this7)),\n      removeViewStack: _this7.removeViewStack.bind(_assertThisInitialized(_this7)),\n      syncView: _this7.syncView.bind(_assertThisInitialized(_this7)),\n      syncRoute: _this7.syncRoute.bind(_assertThisInitialized(_this7)),\n      getRoute: _this7.getRoute.bind(_assertThisInitialized(_this7))\n    };\n\n    _this7.locationHistory.add({\n      hash: window.location.hash,\n      key: generateId(),\n      pathname: window.location.pathname,\n      search: window.location.search,\n      state: {}\n    });\n\n    return _this7;\n  }\n\n  _createClass(RouteManager, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      // Trigger a page change if the location or action is different\n      if (this.state.location && prevState.location !== this.state.location || prevState.action !== this.state.action) {\n        var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n        this.setActiveView(this.state.location, this.state.action, viewStacks);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.listenUnregisterCallback) {\n        this.listenUnregisterCallback();\n      }\n    }\n  }, {\n    key: \"getRoute\",\n    value: function getRoute(id) {\n      return this.routes[id];\n    }\n  }, {\n    key: \"hideView\",\n    value: function hideView(viewId) {\n      var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n\n      var _viewStacks$findViewI = viewStacks.findViewInfoById(viewId),\n          view = _viewStacks$findViewI.view;\n\n      if (view) {\n        view.show = false;\n        view.isIonRoute = false;\n        view.prevId = undefined;\n        view.key = generateId();\n        delete this.ionPageElements[view.id];\n        this.setState({\n          viewStacks: viewStacks\n        });\n      }\n    }\n  }, {\n    key: \"historyChange\",\n    value: function historyChange(location, action) {\n      var ionRouteAction = this.currentIonRouteAction === 'pop' ? 'pop' : action.toLowerCase();\n      var direction = this.currentRouteDirection;\n\n      if (ionRouteAction === 'push') {\n        this.locationHistory.add(location);\n      } else if (ionRouteAction === 'pop') {\n        this.locationHistory.pop();\n        direction = direction || 'back';\n      } else if (ionRouteAction === 'replace') {\n        this.locationHistory.replace(location);\n        direction = 'none';\n      }\n\n      if (direction === 'root') {\n        this.locationHistory.clear();\n        this.locationHistory.add(location);\n      }\n\n      location.state = location.state || {\n        direction: direction\n      };\n      this.setState({\n        location: location,\n        action: ionRouteAction\n      });\n      this.currentRouteDirection = undefined;\n      this.currentIonRouteAction = undefined;\n    }\n  }, {\n    key: \"setActiveView\",\n    value: function setActiveView(location, action, viewStacks) {\n      var _this8 = this;\n\n      var direction = location.state && location.state.direction || 'forward';\n      var leavingView;\n      var viewStackKeys = viewStacks.getKeys();\n      var shouldTransitionPage = false;\n      var leavingViewHtml;\n      viewStackKeys.forEach(function (key) {\n        var _viewStacks$findViewI2 = viewStacks.findViewInfoByLocation(location, key),\n            enteringView = _viewStacks$findViewI2.view,\n            enteringViewStack = _viewStacks$findViewI2.viewStack,\n            match = _viewStacks$findViewI2.match;\n\n        if (!enteringView || !enteringViewStack) {\n          return;\n        }\n\n        leavingView = viewStacks.findViewInfoById(_this8.activeIonPageId).view;\n\n        if (enteringView.isIonRoute) {\n          enteringView.show = true;\n          enteringView.mount = true;\n          enteringView.routeData.match = match;\n          shouldTransitionPage = true;\n          _this8.activeIonPageId = enteringView.id;\n\n          if (leavingView) {\n            if (action === 'push' && direction === 'forward') {\n              /**\n               * If the page is being pushed into the stack by another view,\n               * record the view that originally directed to the new view for back button purposes.\n               */\n              enteringView.prevId = leavingView.id;\n            } else if (direction !== 'none') {\n              leavingView.mount = false;\n\n              _this8.removeOrphanedViews(enteringView, enteringViewStack);\n            }\n\n            leavingViewHtml = enteringView.id === leavingView.id ? _this8.ionPageElements[leavingView.id].outerHTML : undefined;\n          } else {\n            // If there is not a leavingView, then we shouldn't provide a direction\n            direction = undefined;\n          }\n        } else {\n          enteringView.show = true;\n          enteringView.mount = true;\n          enteringView.routeData.match = match;\n        }\n      });\n\n      if (leavingView) {\n        if (!leavingView.isIonRoute) {\n          leavingView.mount = false;\n          leavingView.show = false;\n        }\n      }\n\n      this.setState({\n        viewStacks: viewStacks\n      }, function () {\n        if (shouldTransitionPage) {\n          var _this8$state$viewStac = _this8.state.viewStacks.findViewInfoById(_this8.activeIonPageId),\n              enteringView = _this8$state$viewStac.view,\n              viewStack = _this8$state$viewStac.viewStack;\n\n          if (enteringView && viewStack) {\n            var enteringEl = _this8.ionPageElements[enteringView.id];\n            var leavingEl = leavingView && _this8.ionPageElements[leavingView.id];\n\n            if (enteringEl) {\n              var navDirection;\n\n              if (leavingEl && leavingEl.innerHTML === '') {\n                // Don't animate from an empty view\n                navDirection = undefined;\n              } else if (direction === 'none' || direction === 'root') {\n                navDirection = undefined;\n              } else {\n                navDirection = direction;\n              }\n\n              var shouldGoBack = !!enteringView.prevId;\n              var routerOutlet = _this8.routerOutlets[viewStack.id];\n\n              _this8.commitView(enteringEl, leavingEl, routerOutlet, navDirection, shouldGoBack, leavingViewHtml);\n            } else if (leavingEl) {\n              leavingEl.classList.add('ion-page-hidden');\n              leavingEl.setAttribute('aria-hidden', 'true');\n            }\n          } // Warn if an IonPage was not eventually rendered in Dev Mode\n\n\n          if (isDevMode()) {\n            if (enteringView && enteringView.routeData.match.url !== location.pathname) {\n              setTimeout(function () {\n                var _this8$state$viewStac2 = _this8.state.viewStacks.findViewInfoById(_this8.activeIonPageId),\n                    view = _this8$state$viewStac2.view;\n\n                if (view.routeData.match.url !== location.pathname) {\n                  console.warn('No IonPage was found to render. Make sure you wrap your page with an IonPage component.');\n                }\n              }, 100);\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeOrphanedViews\",\n    value: function removeOrphanedViews(view, viewStack) {\n      var _this9 = this;\n\n      // Note: This technique is a bit wonky for views that reference each other and get into a circular loop.\n      // It can still remove a view that probably shouldn't be.\n      var viewsToRemove = viewStack.views.filter(function (v) {\n        return v.prevId === view.id;\n      });\n      viewsToRemove.forEach(function (v) {\n        // Don't remove if view is currently active\n        if (v.id !== _this9.activeIonPageId) {\n          _this9.removeOrphanedViews(v, viewStack); // If view is not currently visible, go ahead and remove it from DOM\n\n\n          var page = _this9.ionPageElements[v.id];\n\n          if (page.classList.contains('ion-page-hidden')) {\n            v.show = false;\n            v.isIonRoute = false;\n            v.prevId = undefined;\n            v.key = generateId();\n            delete _this9.ionPageElements[v.id];\n          }\n\n          v.mount = false;\n        }\n      });\n    }\n  }, {\n    key: \"setupIonRouter\",\n    value: function setupIonRouter(id, children, routerOutlet) {\n      var _this10 = this;\n\n      var views = [];\n      var activeId;\n      var ionRouterOutlet = React.Children.only(children);\n      var foundMatch = false;\n      React.Children.forEach(ionRouterOutlet.props.children, function (child) {\n        var routeId = generateId();\n        _this10.routes[routeId] = child;\n        views.push(createViewItem(child, routeId, _this10.props.history.location));\n      });\n\n      if (!foundMatch) {\n        var notFoundRoute = views.find(function (r) {\n          // try to find a route that doesn't have a path or from prop, that will be our not found route\n          return !r.routeData.childProps.path && !r.routeData.childProps.from;\n        });\n\n        if (notFoundRoute) {\n          notFoundRoute.show = true;\n        }\n      }\n\n      this.registerViewStack(id, activeId, views, routerOutlet, this.props.location);\n\n      function createViewItem(child, routeId, location) {\n        var viewId = generateId();\n        var key = generateId(); // const route = child;\n\n        var matchProps = {\n          exact: child.props.exact,\n          path: child.props.path || child.props.from,\n          component: child.props.component\n        };\n        var match = matchPath(location.pathname, matchProps);\n        var view = {\n          id: viewId,\n          key: key,\n          routeData: {\n            match: match,\n            childProps: child.props\n          },\n          routeId: routeId,\n          mount: true,\n          show: !!match,\n          isIonRoute: false\n        };\n\n        if (match && view.isIonRoute) {\n          activeId = viewId;\n        }\n\n        if (!foundMatch && match) {\n          foundMatch = true;\n        }\n\n        return view;\n      }\n    }\n  }, {\n    key: \"registerViewStack\",\n    value: function registerViewStack(stack, activeId, stackItems, routerOutlet, _location) {\n      var _this11 = this;\n\n      this.setState(function (prevState) {\n        var prevViewStacks = Object.assign(new ViewStacks(), prevState.viewStacks);\n        var newStack = {\n          id: stack,\n          views: stackItems\n        };\n        _this11.routerOutlets[stack] = routerOutlet;\n\n        if (activeId) {\n          _this11.activeIonPageId = activeId;\n        }\n\n        prevViewStacks.set(stack, newStack);\n        return {\n          viewStacks: prevViewStacks\n        };\n      }, function () {\n        _this11.setupRouterOutlet(routerOutlet);\n      });\n    }\n  }, {\n    key: \"setupRouterOutlet\",\n    value: function () {\n      var _setupRouterOutlet = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(routerOutlet) {\n        var _this12 = this;\n\n        var canStart, onStart;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                canStart = function canStart() {\n                  var config = getConfig();\n                  var swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n\n                  if (swipeEnabled) {\n                    var _this12$state$viewSta = _this12.state.viewStacks.findViewInfoById(_this12.activeIonPageId),\n                        view = _this12$state$viewSta.view;\n\n                    return !!(view && view.prevId);\n                  } else {\n                    return false;\n                  }\n                };\n\n                onStart = function onStart() {\n                  _this12.navigateBack();\n                };\n\n                routerOutlet.swipeHandler = {\n                  canStart: canStart,\n                  onStart: onStart,\n                  onEnd: function onEnd(_shouldContinue) {\n                    return true;\n                  }\n                };\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function setupRouterOutlet(_x) {\n        return _setupRouterOutlet.apply(this, arguments);\n      }\n\n      return setupRouterOutlet;\n    }()\n  }, {\n    key: \"removeViewStack\",\n    value: function removeViewStack(stack) {\n      var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n      viewStacks.delete(stack);\n      this.setState({\n        viewStacks: viewStacks\n      });\n    }\n  }, {\n    key: \"syncView\",\n    value: function syncView(page, viewId) {\n      var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n\n      var _viewStacks$findViewI3 = viewStacks.findViewInfoById(viewId),\n          view = _viewStacks$findViewI3.view;\n\n      if (view) {\n        view.isIonRoute = true;\n        this.ionPageElements[view.id] = page;\n        this.setActiveView(this.state.location || this.props.location, this.state.action, viewStacks);\n      }\n    }\n  }, {\n    key: \"syncRoute\",\n    value: function syncRoute(routerOutlet) {\n      var _this13 = this;\n\n      var ionRouterOutlet = React.Children.only(routerOutlet);\n      React.Children.forEach(ionRouterOutlet.props.children, function (child) {\n        for (var routeKey in _this13.routes) {\n          var route = _this13.routes[routeKey];\n\n          if ((route.props.path || route.props.from) === (child.props.path || child.props.from) && route.props.exact === child.props.exact && route.props.to === child.props.to) {\n            _this13.routes[routeKey] = child;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"commitView\",\n    value: function () {\n      var _commitView = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(enteringEl, leavingEl, ionRouterOutlet, direction, showGoBack, leavingViewHtml) {\n        var newLeavingElement;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.firstRender) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                if ('componentOnReady' in ionRouterOutlet) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _context2.next = 4;\n                return waitUntilRouterOutletReady(ionRouterOutlet);\n\n              case 4:\n                if (!(enteringEl === leavingEl && direction && leavingViewHtml)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                // If a page is transitioning to another version of itself\n                // we clone it so we can have an animation to show\n                newLeavingElement = clonePageElement(leavingViewHtml);\n                ionRouterOutlet.appendChild(newLeavingElement);\n                _context2.next = 9;\n                return ionRouterOutlet.commit(enteringEl, newLeavingElement, {\n                  deepWait: true,\n                  duration: direction === undefined ? 0 : undefined,\n                  direction: direction,\n                  showGoBack: showGoBack,\n                  progressAnimation: false\n                });\n\n              case 9:\n                ionRouterOutlet.removeChild(newLeavingElement);\n                _context2.next = 14;\n                break;\n\n              case 12:\n                _context2.next = 14;\n                return ionRouterOutlet.commit(enteringEl, leavingEl, {\n                  deepWait: true,\n                  duration: direction === undefined ? 0 : undefined,\n                  direction: direction,\n                  showGoBack: showGoBack,\n                  progressAnimation: false\n                });\n\n              case 14:\n                if (leavingEl && enteringEl !== leavingEl) {\n                  /** add hidden attributes */\n                  leavingEl.classList.add('ion-page-hidden');\n                  leavingEl.setAttribute('aria-hidden', 'true');\n                }\n\n                _context2.next = 22;\n                break;\n\n              case 17:\n                enteringEl.classList.remove('ion-page-invisible');\n                enteringEl.style.zIndex = '101';\n                enteringEl.dispatchEvent(new Event('ionViewWillEnter'));\n                enteringEl.dispatchEvent(new Event('ionViewDidEnter'));\n                this.firstRender = false;\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function commitView(_x2, _x3, _x4, _x5, _x6, _x7) {\n        return _commitView.apply(this, arguments);\n      }\n\n      return commitView;\n    }()\n  }, {\n    key: \"handleNavigate\",\n    value: function handleNavigate(ionRouteAction, path, direction) {\n      this.currentIonRouteAction = ionRouteAction;\n\n      switch (ionRouteAction) {\n        case 'push':\n          this.currentRouteDirection = direction;\n          this.props.history.push(path);\n          break;\n\n        case 'pop':\n          this.currentRouteDirection = direction || 'back';\n          this.props.history.replace(path);\n          break;\n\n        case 'replace':\n          this.currentRouteDirection = 'none';\n          this.props.history.replace(path);\n          break;\n      }\n    }\n  }, {\n    key: \"navigateBack\",\n    value: function navigateBack(defaultHref) {\n      var _this$state$viewStack = this.state.viewStacks.findViewInfoById(this.activeIonPageId),\n          leavingView = _this$state$viewStack.view;\n\n      if (leavingView) {\n        if (leavingView.id === leavingView.prevId) {\n          var previousLocation = this.locationHistory.previous();\n\n          if (previousLocation) {\n            this.handleNavigate('pop', previousLocation.pathname + previousLocation.search);\n          } else {\n            defaultHref && this.handleNavigate('pop', defaultHref);\n          }\n        } else {\n          var _this$state$viewStack2 = this.state.viewStacks.findViewInfoById(leavingView.prevId),\n              enteringView = _this$state$viewStack2.view;\n\n          if (enteringView) {\n            var lastLocation = this.locationHistory.findLastLocationByUrl(enteringView.routeData.match.url);\n\n            if (lastLocation) {\n              this.handleNavigate('pop', lastLocation.pathname + lastLocation.search);\n            } else {\n              this.handleNavigate('pop', enteringView.routeData.match.url);\n            }\n          } else {\n            var currentLocation = this.locationHistory.previous();\n\n            if (currentLocation) {\n              this.handleNavigate('pop', currentLocation.pathname + currentLocation.search);\n            } else {\n              if (defaultHref) {\n                this.handleNavigate('pop', defaultHref);\n              }\n            }\n          }\n        }\n      } else {\n        if (defaultHref) {\n          this.handleNavigate('replace', defaultHref, 'back');\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(RouteManagerContext.Provider, {\n        value: this.state\n      }, React.createElement(NavManager, Object.assign({}, this.props, {\n        onNavigateBack: this.navigateBack,\n        onNavigate: this.handleNavigate\n      }), this.props.children));\n    }\n  }]);\n\n  return RouteManager;\n}(React.Component);\n\nfunction clonePageElement(leavingViewHtml) {\n  var newEl = document.createElement('div');\n  newEl.innerHTML = leavingViewHtml;\n  newEl.classList.add('ion-page-hidden');\n  newEl.style.zIndex = ''; // Remove an existing back button so the new element doesn't get two of them\n\n  var ionBackButton = newEl.getElementsByTagName('ion-back-button');\n\n  if (ionBackButton[0]) {\n    ionBackButton[0].innerHTML = '';\n  }\n\n  return newEl.firstChild;\n}\n\nfunction waitUntilRouterOutletReady(_x8) {\n  return _waitUntilRouterOutletReady.apply(this, arguments);\n}\n\nfunction _waitUntilRouterOutletReady() {\n  _waitUntilRouterOutletReady = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(ionRouterOutlet) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!('componentOnReady' in ionRouterOutlet)) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            setTimeout(function () {\n              waitUntilRouterOutletReady(ionRouterOutlet);\n            }, 0);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _waitUntilRouterOutletReady.apply(this, arguments);\n}\n\nvar RouteManagerWithRouter = withRouter(RouteManager);\nRouteManagerWithRouter.displayName = 'RouteManager';\n\nvar IonReactRouter =\n/*#__PURE__*/\nfunction (_React$Component6) {\n  _inherits(IonReactRouter, _React$Component6);\n\n  function IonReactRouter() {\n    _classCallCheck(this, IonReactRouter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IonReactRouter).apply(this, arguments));\n  }\n\n  _createClass(IonReactRouter, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n      return React.createElement(BrowserRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n    }\n  }]);\n\n  return IonReactRouter;\n}(React.Component);\n\nvar IonReactHashRouter =\n/*#__PURE__*/\nfunction (_React$Component7) {\n  _inherits(IonReactHashRouter, _React$Component7);\n\n  function IonReactHashRouter() {\n    _classCallCheck(this, IonReactHashRouter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IonReactHashRouter).apply(this, arguments));\n  }\n\n  _createClass(IonReactHashRouter, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n      return React.createElement(HashRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n    }\n  }]);\n\n  return IonReactHashRouter;\n}(React.Component);\n\nvar IonReactMemoryRouter =\n/*#__PURE__*/\nfunction (_React$Component8) {\n  _inherits(IonReactMemoryRouter, _React$Component8);\n\n  function IonReactMemoryRouter() {\n    _classCallCheck(this, IonReactMemoryRouter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IonReactMemoryRouter).apply(this, arguments));\n  }\n\n  _createClass(IonReactMemoryRouter, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          history = _a.history,\n          props = __rest(_a, [\"children\", \"history\"]);\n\n      var match = matchPath$1(history.location.pathname, this.props);\n      return React.createElement(MemoryRouter, Object.assign({}, props), React.createElement(RouteManager, {\n        history: history,\n        location: history.location,\n        match: match\n      }, children));\n    }\n  }]);\n\n  return IonReactMemoryRouter;\n}(React.Component);\n\nexport { IonReactHashRouter, IonReactMemoryRouter, IonReactRouter };","map":{"version":3,"sources":["../src/utils/generateId.ts","../src/utils/dev.ts","../src/utils/LocationHistory.ts","../src/ReactRouter/ViewStacks.ts","../src/ReactRouter/RouteManagerContext.ts","../src/ReactRouter/View.tsx","../src/ReactRouter/ViewTransitionManager.tsx","../src/ReactRouter/StackManager.tsx","../src/ReactRouter/NavManager.tsx","../src/ReactRouter/Router.tsx","../src/ReactRouter/IonReactRouter.tsx","../src/ReactRouter/IonReactHashRouter.tsx","../src/ReactRouter/IonReactMemoryRouter.tsx"],"names":["matchPath"],"mappings":"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","sourcesContent":["let count = 0;\n\nexport const generateId = () => (count++).toString();\n","export const isDevMode = () => {\n  return process && process.env && process.env.NODE_ENV === 'development';\n};\n\nexport const deprecationWarning = (message: string) => {\n  if (isDevMode()) {\n    console.warn(message);\n  }\n};\n","import { Location as HistoryLocation } from 'history';\n\nconst RESTRICT_SIZE = 25;\n\nexport class LocationHistory {\n  private locationHistory: HistoryLocation[] = [];\n\n  add(location: HistoryLocation) {\n    this.locationHistory.push(location);\n    if (this.locationHistory.length > RESTRICT_SIZE) {\n      this.locationHistory.splice(0, 10);\n    }\n  }\n\n  pop() {\n    this.locationHistory.pop();\n  }\n\n  replace(location: HistoryLocation) {\n    this.locationHistory.pop();\n    this.locationHistory.push(location);\n  }\n\n  clear() {\n    this.locationHistory = [];\n  }\n\n  findLastLocationByUrl(url: string) {\n    for (let i = this.locationHistory.length - 1; i >= 0; i--) {\n      const location = this.locationHistory[i];\n      if (location.pathname.toLocaleLowerCase() === url.toLocaleLowerCase()) {\n        return location;\n      }\n    }\n    return undefined;\n  }\n\n  previous() {\n    return this.locationHistory[this.locationHistory.length - 2];\n  }\n\n  current() {\n    return this.locationHistory[this.locationHistory.length - 1];\n  }\n}\n","import { Location as HistoryLocation } from 'history';\nimport { matchPath } from 'react-router-dom';\n\nimport { IonRouteData } from './IonRouteData';\nimport { ViewItem } from './ViewItem';\n\nexport interface ViewStack {\n  id: string;\n  views: ViewItem[];\n}\n\n/**\n * The holistic view of all the Routes configured for an application inside of an IonRouterOutlet.\n */\nexport class ViewStacks {\n  private viewStacks: { [key: string]: ViewStack | undefined; } = {};\n\n  get(key: string) {\n    return this.viewStacks[key];\n  }\n\n  set(key: string, viewStack: ViewStack) {\n    this.viewStacks[key] = viewStack;\n  }\n\n  getKeys() {\n    return Object.keys(this.viewStacks);\n  }\n\n  delete(key: string) {\n    delete this.viewStacks[key];\n  }\n\n  findViewInfoByLocation(location: HistoryLocation, viewKey: string) {\n    let view: ViewItem<IonRouteData> | undefined;\n    let match: IonRouteData['match'] | null | undefined;\n    let viewStack: ViewStack | undefined;\n\n    viewStack = this.viewStacks[viewKey];\n    if (viewStack) {\n      viewStack.views.some(matchView);\n\n      if (!view) {\n        viewStack.views.some(r => {\n          // try to find a route that doesn't have a path or from prop, that will be our not found route\n          if (!r.routeData.childProps.path && !r.routeData.childProps.from) {\n            match = {\n              path: location.pathname,\n              url: location.pathname,\n              isExact: true,\n              params: {}\n            };\n            view = r;\n            return true;\n          }\n          return false;\n        });\n      }\n    }\n\n    return { view, viewStack, match };\n\n    function matchView(v: ViewItem) {\n      const matchProps = {\n        exact: v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component\n      };\n      const myMatch: IonRouteData['match'] | null | undefined = matchPath(location.pathname, matchProps);\n      if (myMatch) {\n        view = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n\n  }\n\n  findViewInfoById(id = '') {\n    let view: ViewItem<IonRouteData> | undefined;\n    let viewStack: ViewStack | undefined;\n    const keys = this.getKeys();\n    keys.some(key => {\n      const vs = this.viewStacks[key];\n      view = vs!.views.find(x => x.id === id);\n      if (view) {\n        viewStack = vs;\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return { view, viewStack };\n  }\n\n}\n","import React, { ReactNode } from 'react';\n\nimport { ViewStacks } from './ViewStacks';\n\nexport interface RouteManagerContextState {\n  syncView: (page: HTMLElement, viewId: string) => void;\n  syncRoute: (route: any) => void;\n  hideView: (viewId: string) => void;\n  viewStacks: ViewStacks;\n  setupIonRouter: (id: string, children: ReactNode, routerOutlet: HTMLIonRouterOutletElement) => void;\n  removeViewStack: (stack: string) => void;\n  getRoute: (id: string) => any;\n}\n\nexport const RouteManagerContext = /*@__PURE__*/React.createContext<RouteManagerContextState>({\n  viewStacks: new ViewStacks(),\n  syncView: () => { navContextNotFoundError(); },\n  syncRoute: () => { navContextNotFoundError(); },\n  hideView: () => { navContextNotFoundError(); },\n  setupIonRouter: () => Promise.reject(navContextNotFoundError()),\n  removeViewStack: () => { navContextNotFoundError(); },\n  getRoute: () => { navContextNotFoundError(); }\n});\n\nfunction navContextNotFoundError() {\n  console.error('IonReactRouter not found, did you add it to the app?');\n}\n","import { IonLifeCycleContext, NavContext } from '@ionic/react';\nimport React from 'react';\nimport { Redirect } from 'react-router';\n\nimport { isDevMode } from '../utils';\n\nimport { ViewItem } from './ViewItem';\n\ninterface ViewProps extends React.HTMLAttributes<HTMLElement> {\n  onViewSync: (page: HTMLElement, viewId: string) => void;\n  onHideView: (viewId: string) => void;\n  view: ViewItem;\n  route: any;\n}\n\n/**\n * The View component helps manage the IonPage's lifecycle and registration\n */\nexport class View extends React.Component<ViewProps, {}> {\n  context!: React.ContextType<typeof IonLifeCycleContext>;\n  ionPage?: HTMLElement;\n\n  componentDidMount() {\n    /**\n     * If we can tell if view is a redirect, hide it so it will work again in future\n     */\n    const { view, route } = this.props;\n    if (route.type === Redirect) {\n      this.props.onHideView(view.id);\n    } else if (route.props.render && !view.isIonRoute) {\n      // Test the render to see if it returns a redirect\n      if (route.props.render().type === Redirect) {\n        this.props.onHideView(view.id);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.ionPage) {\n      this.ionPage.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n    }\n  }\n\n  ionViewWillEnterHandler() {\n    this.context.ionViewWillEnter();\n  }\n\n  ionViewDidEnterHandler() {\n    this.context.ionViewDidEnter();\n  }\n\n  ionViewWillLeaveHandler() {\n    this.context.ionViewWillLeave();\n  }\n\n  ionViewDidLeaveHandler() {\n    this.context.ionViewDidLeave();\n  }\n\n  registerIonPage(page: HTMLElement) {\n    this.ionPage = page;\n    this.ionPage.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n    this.ionPage.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n    this.ionPage.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n    this.ionPage.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n    this.ionPage.classList.add('ion-page-invisible');\n    if (isDevMode()) {\n      this.ionPage.setAttribute('data-view-id', this.props.view.id);\n    }\n    this.props.onViewSync(page, this.props.view.id);\n  }\n\n  render() {\n    return (\n      <NavContext.Consumer>\n        {value => {\n          const newProvider = {\n            ...value,\n            registerIonPage: this.registerIonPage.bind(this)\n          };\n\n          return (\n            <NavContext.Provider value={newProvider}>\n              {this.props.children}\n            </NavContext.Provider>\n          );\n\n        }}\n      </NavContext.Consumer>\n    );\n  }\n\n  static get contextType() {\n    return IonLifeCycleContext;\n  }\n}\n","import { DefaultIonLifeCycleContext, IonLifeCycleContext } from '@ionic/react';\nimport React from 'react';\n\nimport { RouteManagerContext } from './RouteManagerContext';\n\ninterface ViewTransitionManagerProps {\n  id: string;\n  mount: boolean;\n}\n\ninterface ViewTransitionManagerState {\n  show: boolean;\n}\n\n/**\n * Manages the View's DOM lifetime by keeping it around long enough to complete page transitions before removing it.\n */\nexport class ViewTransitionManager extends React.Component<ViewTransitionManagerProps, ViewTransitionManagerState> {\n  ionLifeCycleContext = new DefaultIonLifeCycleContext();\n  _isMounted = false;\n  context!: React.ContextType<typeof RouteManagerContext>;\n\n  constructor(props: ViewTransitionManagerProps) {\n    super(props);\n    this.state = {\n      show: true\n    };\n\n    this.ionLifeCycleContext.onComponentCanBeDestroyed(() => {\n      if (!this.props.mount) {\n        if (this._isMounted) {\n          this.setState({\n            show: false\n          }, () => {\n            this.context.hideView(this.props.id);\n          });\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const { show } = this.state;\n    return (\n      <IonLifeCycleContext.Provider value={this.ionLifeCycleContext}>\n        {show && this.props.children}\n      </IonLifeCycleContext.Provider>\n    );\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\n","import React from 'react';\n\nimport { generateId, isDevMode } from '../utils';\n\nimport { RouteManagerContext, RouteManagerContextState } from './RouteManagerContext';\nimport { View } from './View';\nimport { ViewItem } from './ViewItem';\nimport { ViewTransitionManager } from './ViewTransitionManager';\n\ninterface StackManagerProps {\n  id?: string;\n  routeManager: RouteManagerContextState;\n  children?: React.ReactNode;\n}\n\ninterface StackManagerState { }\n\nclass StackManagerInner extends React.Component<StackManagerProps, StackManagerState> {\n  routerOutletEl: React.RefObject<HTMLIonRouterOutletElement> = React.createRef();\n  id: string;\n\n  constructor(props: StackManagerProps) {\n    super(props);\n    this.id = this.props.id || generateId();\n    this.handleViewSync = this.handleViewSync.bind(this);\n    this.handleHideView = this.handleHideView.bind(this);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.props.routeManager.setupIonRouter(this.id, this.props.children, this.routerOutletEl.current!);\n  }\n\n  static getDerivedStateFromProps(props: StackManagerProps, state: StackManagerState) {\n    props.routeManager.syncRoute(props.children);\n    return state;\n  }\n\n  componentWillUnmount() {\n    this.props.routeManager.removeViewStack(this.id);\n  }\n\n  handleViewSync(page: HTMLElement, viewId: string) {\n    this.props.routeManager.syncView(page, viewId);\n  }\n\n  handleHideView(viewId: string) {\n    this.props.routeManager.hideView(viewId);\n  }\n\n  renderChild(item: ViewItem, route: any) {\n    const component = React.cloneElement(route, {\n      computedMatch: item.routeData.match\n    });\n    return component;\n  }\n\n  render() {\n    const routeManager = this.props.routeManager;\n    const viewStack = routeManager.viewStacks.get(this.id);\n    const views = (viewStack || { views: [] }).views.filter(x => x.show);\n    const ionRouterOutlet = React.Children.only(this.props.children) as React.ReactElement;\n    const childElements = views.map(view => {\n      const route = routeManager.getRoute(view.routeId);\n      return (\n        <ViewTransitionManager\n          id={view.id}\n          key={view.key}\n          mount={view.mount}\n        >\n          <View\n            onViewSync={this.handleViewSync}\n            onHideView={this.handleHideView}\n            view={view}\n            route={route}\n          >\n            {this.renderChild(view, route)}\n          </View>\n        </ViewTransitionManager>\n      );\n    });\n\n    const elementProps: any = {\n      ref: this.routerOutletEl\n    };\n\n    if (ionRouterOutlet.props.forwardedRef) {\n      ionRouterOutlet.props.forwardedRef.current = this.routerOutletEl;\n    }\n\n    if (isDevMode()) {\n      elementProps['data-stack-id'] = this.id;\n    }\n\n    const routerOutletChild = React.cloneElement(ionRouterOutlet, elementProps, childElements);\n\n    return routerOutletChild;\n  }\n}\n\nconst withContext = (Component: any) => {\n  return (props: any) => (\n    <RouteManagerContext.Consumer>\n      {context => <Component {...props} routeManager={context} />}\n    </RouteManagerContext.Consumer>\n  );\n};\n\nexport const StackManager = withContext(StackManagerInner);\n","import { RouterDirection } from '@ionic/core';\nimport { NavContext, NavContextState } from '@ionic/react';\nimport { Location as HistoryLocation, UnregisterCallback } from 'history';\nimport React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport { IonRouteAction } from './IonRouteAction';\nimport { StackManager } from './StackManager';\n\ninterface NavManagerProps extends RouteComponentProps {\n  onNavigateBack: (defaultHref?: string) => void;\n  onNavigate: (ionRouteAction: IonRouteAction, path: string, state?: any) => void;\n}\n\nexport class NavManager extends React.Component<NavManagerProps, NavContextState> {\n\n  listenUnregisterCallback: UnregisterCallback | undefined;\n\n  constructor(props: NavManagerProps) {\n    super(props);\n    this.state = {\n      goBack: this.goBack.bind(this),\n      hasIonicRouter: () => true,\n      navigate: this.navigate.bind(this),\n      getStackManager: this.getStackManager.bind(this),\n      getPageManager: this.getPageManager.bind(this),\n      currentPath: this.props.location.pathname,\n      registerIonPage: () => { return; } // overridden in View for each IonPage\n    };\n\n    this.listenUnregisterCallback = this.props.history.listen((location: HistoryLocation) => {\n      this.setState({\n        currentPath: location.pathname\n      });\n    });\n\n    if (document) {\n      document.addEventListener('ionBackButton', (e: any) => {\n        e.detail.register(0, () => {\n          this.props.history.goBack();\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.listenUnregisterCallback) {\n      this.listenUnregisterCallback();\n    }\n  }\n\n  goBack(defaultHref?: string) {\n    this.props.onNavigateBack(defaultHref);\n  }\n\n  navigate(path: string, direction?: RouterDirection | 'none', ionRouteAction: IonRouteAction = 'push') {\n    this.props.onNavigate(ionRouteAction, path, direction);\n  }\n\n  getPageManager() {\n    return (children: any) => children;\n  }\n\n  getStackManager() {\n    return StackManager;\n  }\n\n  render() {\n    return (\n      <NavContext.Provider value={this.state}>\n        {this.props.children}\n      </NavContext.Provider>\n    );\n  }\n\n}\n","import { NavDirection } from '@ionic/core';\nimport { RouterDirection, getConfig } from '@ionic/react';\nimport { Action as HistoryAction, Location as HistoryLocation, UnregisterCallback } from 'history';\nimport React from 'react';\nimport { RouteComponentProps, matchPath, withRouter } from 'react-router-dom';\n\nimport { generateId, isDevMode } from '../utils';\nimport { LocationHistory } from '../utils/LocationHistory';\n\nimport { IonRouteAction } from './IonRouteAction';\nimport { IonRouteData } from './IonRouteData';\nimport { NavManager } from './NavManager';\nimport { RouteManagerContext, RouteManagerContextState } from './RouteManagerContext';\nimport { ViewItem } from './ViewItem';\nimport { ViewStack, ViewStacks } from './ViewStacks';\n\nexport interface LocationState {\n  direction?: RouterDirection;\n  action?: IonRouteAction;\n}\n\ninterface RouteManagerProps extends RouteComponentProps<{}, {}, LocationState> {\n  location: HistoryLocation<LocationState>;\n}\n\ninterface RouteManagerState extends RouteManagerContextState {\n  location?: HistoryLocation<LocationState>;\n  action?: IonRouteAction;\n}\n\nexport class RouteManager extends React.Component<RouteManagerProps, RouteManagerState> {\n  listenUnregisterCallback: UnregisterCallback | undefined;\n  activeIonPageId?: string;\n  currentIonRouteAction?: IonRouteAction;\n  currentRouteDirection?: RouterDirection;\n  locationHistory = new LocationHistory();\n  routes: { [key: string]: React.ReactElement<any>; } = {};\n  ionPageElements: { [key: string]: HTMLElement; } = {};\n  routerOutlets: { [key: string]: HTMLIonRouterOutletElement; } = {};\n  firstRender = true;\n\n  constructor(props: RouteManagerProps) {\n    super(props);\n    this.listenUnregisterCallback = this.props.history.listen(this.historyChange.bind(this));\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.navigateBack = this.navigateBack.bind(this);\n    this.state = {\n      viewStacks: new ViewStacks(),\n      hideView: this.hideView.bind(this),\n      setupIonRouter: this.setupIonRouter.bind(this),\n      removeViewStack: this.removeViewStack.bind(this),\n      syncView: this.syncView.bind(this),\n      syncRoute: this.syncRoute.bind(this),\n      getRoute: this.getRoute.bind(this)\n    };\n\n    this.locationHistory.add({\n      hash: window.location.hash,\n      key: generateId(),\n      pathname: window.location.pathname,\n      search: window.location.search,\n      state: {}\n    });\n  }\n\n  componentDidUpdate(_prevProps: RouteComponentProps, prevState: RouteManagerState) {\n    // Trigger a page change if the location or action is different\n    if (this.state.location && prevState.location !== this.state.location || prevState.action !== this.state.action) {\n      const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n      this.setActiveView(this.state.location!, this.state.action!, viewStacks);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.listenUnregisterCallback) {\n      this.listenUnregisterCallback();\n    }\n  }\n\n  getRoute(id: string) {\n    return this.routes[id];\n  }\n\n  hideView(viewId: string) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    const { view } = viewStacks.findViewInfoById(viewId);\n    if (view) {\n      view.show = false;\n      view.isIonRoute = false;\n      view.prevId = undefined;\n      view.key = generateId();\n      delete this.ionPageElements[view.id];\n      this.setState({\n        viewStacks\n      });\n    }\n  }\n\n  historyChange(location: HistoryLocation<LocationState>, action: HistoryAction) {\n    const ionRouteAction = this.currentIonRouteAction === 'pop' ? 'pop' : action.toLowerCase() as IonRouteAction;\n    let direction = this.currentRouteDirection;\n\n    if (ionRouteAction === 'push') {\n      this.locationHistory.add(location);\n    } else if (ionRouteAction === 'pop') {\n      this.locationHistory.pop();\n      direction = direction || 'back';\n    } else if (ionRouteAction === 'replace') {\n      this.locationHistory.replace(location);\n      direction = 'none';\n    }\n\n    if (direction === 'root') {\n      this.locationHistory.clear();\n      this.locationHistory.add(location);\n    }\n\n    location.state = location.state || { direction };\n    this.setState({\n      location,\n      action: ionRouteAction as IonRouteAction\n    });\n    this.currentRouteDirection = undefined;\n    this.currentIonRouteAction = undefined;\n  }\n\n  setActiveView(location: HistoryLocation<LocationState>, action: IonRouteAction, viewStacks: ViewStacks) {\n    let direction: RouterDirection | undefined = (location.state && location.state.direction) || 'forward';\n    let leavingView: ViewItem | undefined;\n    const viewStackKeys = viewStacks.getKeys();\n    let shouldTransitionPage = false;\n    let leavingViewHtml: string | undefined;\n\n    viewStackKeys.forEach(key => {\n      const { view: enteringView, viewStack: enteringViewStack, match } = viewStacks.findViewInfoByLocation(location, key);\n      if (!enteringView || !enteringViewStack) {\n        return;\n      }\n\n      leavingView = viewStacks.findViewInfoById(this.activeIonPageId).view;\n\n      if (enteringView.isIonRoute) {\n        enteringView.show = true;\n        enteringView.mount = true;\n        enteringView.routeData.match = match!;\n        shouldTransitionPage = true;\n\n        this.activeIonPageId = enteringView.id;\n\n        if (leavingView) {\n          if (action === 'push' && direction === 'forward') {\n            /**\n             * If the page is being pushed into the stack by another view,\n             * record the view that originally directed to the new view for back button purposes.\n             */\n            enteringView.prevId = leavingView.id;\n          } else if (direction !== 'none') {\n            leavingView.mount = false;\n            this.removeOrphanedViews(enteringView, enteringViewStack);\n          }\n\n          leavingViewHtml = enteringView.id === leavingView.id ? this.ionPageElements[leavingView.id].outerHTML : undefined;\n        } else {\n          // If there is not a leavingView, then we shouldn't provide a direction\n          direction = undefined;\n        }\n\n      } else {\n        enteringView.show = true;\n        enteringView.mount = true;\n        enteringView.routeData.match = match!;\n      }\n\n    });\n\n    if (leavingView) {\n      if (!leavingView.isIonRoute) {\n        leavingView.mount = false;\n        leavingView.show = false;\n      }\n    }\n\n    this.setState({\n      viewStacks\n    }, () => {\n      if (shouldTransitionPage) {\n        const { view: enteringView, viewStack } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n        if (enteringView && viewStack) {\n          const enteringEl = this.ionPageElements[enteringView.id];\n          const leavingEl = leavingView && this.ionPageElements[leavingView.id];\n          if (enteringEl) {\n            let navDirection: NavDirection | undefined;\n            if (leavingEl && leavingEl.innerHTML === '') {\n              // Don't animate from an empty view\n              navDirection = undefined;\n            } else if (direction === 'none' || direction === 'root') {\n              navDirection = undefined;\n            } else {\n              navDirection = direction;\n            }\n            const shouldGoBack = !!enteringView.prevId;\n            const routerOutlet = this.routerOutlets[viewStack.id];\n            this.commitView(\n              enteringEl!,\n              leavingEl!,\n              routerOutlet,\n              navDirection,\n              shouldGoBack,\n              leavingViewHtml);\n          } else if (leavingEl) {\n            leavingEl.classList.add('ion-page-hidden');\n            leavingEl.setAttribute('aria-hidden', 'true');\n          }\n        }\n\n        // Warn if an IonPage was not eventually rendered in Dev Mode\n        if (isDevMode()) {\n          if (enteringView && enteringView.routeData.match!.url !== location.pathname) {\n            setTimeout(() => {\n              const { view } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n              if (view!.routeData.match!.url !== location.pathname) {\n                console.warn('No IonPage was found to render. Make sure you wrap your page with an IonPage component.');\n              }\n            }, 100);\n          }\n        }\n      }\n    });\n  }\n\n  removeOrphanedViews(view: ViewItem, viewStack: ViewStack) {\n    // Note: This technique is a bit wonky for views that reference each other and get into a circular loop.\n    // It can still remove a view that probably shouldn't be.\n    const viewsToRemove = viewStack.views.filter(v => v.prevId === view.id);\n    viewsToRemove.forEach(v => {\n      // Don't remove if view is currently active\n      if (v.id !== this.activeIonPageId) {\n        this.removeOrphanedViews(v, viewStack);\n\n        // If view is not currently visible, go ahead and remove it from DOM\n        const page = this.ionPageElements[v.id];\n        if (page.classList.contains('ion-page-hidden')) {\n          v.show = false;\n          v.isIonRoute = false;\n          v.prevId = undefined;\n          v.key = generateId();\n          delete this.ionPageElements[v.id];\n        }\n        v.mount = false;\n      }\n    });\n  }\n\n  setupIonRouter(id: string, children: any, routerOutlet: HTMLIonRouterOutletElement) {\n    const views: ViewItem[] = [];\n    let activeId: string | undefined;\n    const ionRouterOutlet = React.Children.only(children) as React.ReactElement;\n    let foundMatch = false;\n    React.Children.forEach(ionRouterOutlet.props.children, (child: React.ReactElement) => {\n      const routeId = generateId();\n      this.routes[routeId] = child;\n      views.push(createViewItem(child, routeId, this.props.history.location));\n    });\n\n    if (!foundMatch) {\n      const notFoundRoute = views.find(r => {\n        // try to find a route that doesn't have a path or from prop, that will be our not found route\n        return !r.routeData.childProps.path && !r.routeData.childProps.from;\n      });\n      if (notFoundRoute) {\n        notFoundRoute.show = true;\n      }\n    }\n\n    this.registerViewStack(id, activeId, views, routerOutlet, this.props.location);\n\n    function createViewItem(child: React.ReactElement<any>, routeId: string, location: HistoryLocation) {\n      const viewId = generateId();\n      const key = generateId();\n\n      // const route = child;\n      const matchProps = {\n        exact: child.props.exact,\n        path: child.props.path || child.props.from,\n        component: child.props.component\n      };\n      const match: IonRouteData['match'] = matchPath(location.pathname, matchProps);\n      const view: ViewItem<IonRouteData> = {\n        id: viewId,\n        key,\n        routeData: {\n          match,\n          childProps: child.props\n        },\n        routeId,\n        mount: true,\n        show: !!match,\n        isIonRoute: false\n      };\n      if (match && view.isIonRoute) {\n        activeId = viewId;\n      }\n      if (!foundMatch && match) {\n        foundMatch = true;\n      }\n      return view;\n    }\n  }\n\n  registerViewStack(stack: string, activeId: string | undefined, stackItems: ViewItem[], routerOutlet: HTMLIonRouterOutletElement, _location: HistoryLocation) {\n    this.setState(prevState => {\n      const prevViewStacks = Object.assign(new ViewStacks(), prevState.viewStacks);\n      const newStack: ViewStack = {\n        id: stack,\n        views: stackItems\n      };\n      this.routerOutlets[stack] = routerOutlet;\n      if (activeId) {\n        this.activeIonPageId = activeId;\n      }\n      prevViewStacks.set(stack, newStack);\n      return {\n        viewStacks: prevViewStacks\n      };\n    }, () => {\n      this.setupRouterOutlet(routerOutlet);\n    });\n  }\n\n  async setupRouterOutlet(routerOutlet: HTMLIonRouterOutletElement) {\n\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (swipeEnabled) {\n        const { view } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n        return !!(view && view.prevId);\n      } else {\n        return false;\n      }\n    };\n\n    const onStart = () => {\n      this.navigateBack();\n    };\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd: _shouldContinue => true\n    };\n  }\n\n  removeViewStack(stack: string) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    viewStacks.delete(stack);\n    this.setState({\n      viewStacks\n    });\n  }\n\n  syncView(page: HTMLElement, viewId: string) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    const { view } = viewStacks.findViewInfoById(viewId);\n    if (view) {\n      view.isIonRoute = true;\n      this.ionPageElements[view.id] = page;\n      this.setActiveView(this.state.location || this.props.location, this.state.action!, viewStacks);\n    }\n  }\n\n  syncRoute(routerOutlet: any) {\n    const ionRouterOutlet = React.Children.only(routerOutlet) as React.ReactElement;\n\n    React.Children.forEach(ionRouterOutlet.props.children, (child: React.ReactElement) => {\n      for (const routeKey in this.routes) {\n        const route = this.routes[routeKey];\n        if (\n          ((route.props.path || route.props.from) === (child.props.path || child.props.from)) &&\n          (route.props.exact === child.props.exact) &&\n          (route.props.to === child.props.to)\n        ) {\n          this.routes[routeKey] = child;\n        }\n      }\n    });\n  }\n\n  private async commitView(enteringEl: HTMLElement, leavingEl: HTMLElement, ionRouterOutlet: HTMLIonRouterOutletElement, direction?: NavDirection, showGoBack?: boolean, leavingViewHtml?: string) {\n    if (!this.firstRender) {\n\n      if (!('componentOnReady' in ionRouterOutlet)) {\n        await waitUntilRouterOutletReady(ionRouterOutlet);\n      }\n\n      if ((enteringEl === leavingEl) && direction && leavingViewHtml) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n        const newLeavingElement = clonePageElement(leavingViewHtml);\n        ionRouterOutlet.appendChild(newLeavingElement);\n        await ionRouterOutlet.commit(enteringEl, newLeavingElement, {\n          deepWait: true,\n          duration: direction === undefined ? 0 : undefined,\n          direction,\n          showGoBack,\n          progressAnimation: false\n        });\n        ionRouterOutlet.removeChild(newLeavingElement);\n      } else {\n        await ionRouterOutlet.commit(enteringEl, leavingEl, {\n          deepWait: true,\n          duration: direction === undefined ? 0 : undefined,\n          direction,\n          showGoBack,\n          progressAnimation: false\n        });\n      }\n\n      if (leavingEl && (enteringEl !== leavingEl)) {\n        /** add hidden attributes */\n        leavingEl.classList.add('ion-page-hidden');\n        leavingEl.setAttribute('aria-hidden', 'true');\n      }\n    } else {\n      enteringEl.classList.remove('ion-page-invisible');\n      enteringEl.style.zIndex = '101';\n      enteringEl.dispatchEvent(new Event('ionViewWillEnter'));\n      enteringEl.dispatchEvent(new Event('ionViewDidEnter'));\n      this.firstRender = false;\n    }\n  }\n\n  handleNavigate(ionRouteAction: IonRouteAction, path: string, direction?: RouterDirection) {\n    this.currentIonRouteAction = ionRouteAction;\n    switch (ionRouteAction) {\n      case 'push':\n        this.currentRouteDirection = direction;\n        this.props.history.push(path);\n        break;\n      case 'pop':\n        this.currentRouteDirection = direction || 'back';\n        this.props.history.replace(path);\n        break;\n      case 'replace':\n        this.currentRouteDirection = 'none';\n        this.props.history.replace(path);\n        break;\n    }\n  }\n\n  navigateBack(defaultHref?: string) {\n    const { view: leavingView } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n    if (leavingView) {\n      if (leavingView.id === leavingView.prevId) {\n        const previousLocation = this.locationHistory.previous();\n        if (previousLocation) {\n          this.handleNavigate('pop', previousLocation.pathname + previousLocation.search);\n        } else {\n          defaultHref && this.handleNavigate('pop', defaultHref);\n        }\n      } else {\n        const { view: enteringView } = this.state.viewStacks.findViewInfoById(leavingView.prevId);\n        if (enteringView) {\n          const lastLocation = this.locationHistory.findLastLocationByUrl(enteringView.routeData.match!.url);\n          if (lastLocation) {\n            this.handleNavigate('pop', lastLocation.pathname + lastLocation.search);\n          } else {\n            this.handleNavigate('pop', enteringView.routeData.match!.url);\n          }\n        } else {\n          const currentLocation = this.locationHistory.previous();\n          if (currentLocation) {\n            this.handleNavigate('pop', currentLocation.pathname + currentLocation.search);\n          } else {\n            if (defaultHref) {\n              this.handleNavigate('pop', defaultHref);\n            }\n          }\n        }\n      }\n    } else {\n      if (defaultHref) {\n        this.handleNavigate('replace', defaultHref, 'back');\n      }\n    }\n  }\n\n  render() {\n    return (\n      <RouteManagerContext.Provider value={this.state}>\n        <NavManager\n          {...this.props}\n          onNavigateBack={this.navigateBack}\n          onNavigate={this.handleNavigate}\n        >\n          {this.props.children}\n        </NavManager>\n      </RouteManagerContext.Provider>\n    );\n  }\n}\n\nfunction clonePageElement(leavingViewHtml: string) {\n  const newEl = document.createElement('div');\n  newEl.innerHTML = leavingViewHtml;\n  newEl.classList.add('ion-page-hidden');\n  newEl.style.zIndex = '';\n  // Remove an existing back button so the new element doesn't get two of them\n  const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n  if (ionBackButton[0]) {\n    ionBackButton[0].innerHTML = '';\n  }\n  return newEl.firstChild as HTMLElement;\n}\n\nasync function waitUntilRouterOutletReady(ionRouterOutlet: HTMLIonRouterElement) {\n  if ('componentOnReady' in ionRouterOutlet) {\n    return;\n  } else {\n    setTimeout(() => {\n      waitUntilRouterOutletReady(ionRouterOutlet);\n    }, 0);\n  }\n}\n\nexport const RouteManagerWithRouter = withRouter(RouteManager);\nRouteManagerWithRouter.displayName = 'RouteManager';\n","import React from 'react';\nimport { BrowserRouter, BrowserRouterProps } from 'react-router-dom';\n\nimport { RouteManagerWithRouter } from './Router';\n\nexport class IonReactRouter extends React.Component<BrowserRouterProps> {\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <BrowserRouter {...props}>\n        <RouteManagerWithRouter>{children}</RouteManagerWithRouter>\n      </BrowserRouter>\n    );\n  }\n}\n","import React from 'react';\nimport { HashRouter, HashRouterProps } from 'react-router-dom';\n\nimport { RouteManagerWithRouter } from './Router';\n\nexport class IonReactHashRouter extends React.Component<HashRouterProps> {\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <HashRouter {...props}>\n        <RouteManagerWithRouter>{children}</RouteManagerWithRouter>\n      </HashRouter>\n    );\n  }\n}\n","import { MemoryHistory } from 'history';\nimport React from 'react';\nimport { MemoryRouter, MemoryRouterProps, matchPath } from 'react-router';\n\nimport { LocationState, RouteManager } from './Router';\n\ninterface IonReactMemoryRouterProps extends MemoryRouterProps {\n  history: MemoryHistory<LocationState>;\n}\n\nexport class IonReactMemoryRouter extends React.Component<IonReactMemoryRouterProps> {\n  render() {\n    const { children, history, ...props } = this.props;\n    const match = matchPath(history.location.pathname, this.props);\n    return (\n      <MemoryRouter {...props}>\n        <RouteManager history={history} location={history.location} match={match!}>{children}</RouteManager>\n      </MemoryRouter>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}